#+title: Migrate from MFRoad to RSML
#+author: Matthew (MF366)
#+description: A quick guide on how to migrate from MFRoad to RSML.

#+options: toc:nil
#+TOC: headlines 3

[[file:ReadMeFirst.org][*◀ Go back*]]

* 🛩 Starting the migration
#+begin_quote
This guide assumes you've already installed RSML.
#+end_quote

The first incovenience you'll face is that you are required to know C#. Well, either that or you use another language and make calls to the RSML DLL.

The second inconvenience - from a RSML begginer's point of view - is the fact RSML is *not* normalized. Each developer is free to use their own [[file:../RSML_Language_Standards/ReadMeFirst.org][language standards]], which is something that isn't easy to take in at first. However, RSML brings a better, easier and more readable syntax, as well as a couple of other pretty useful features. Let's take a look at each one individually.

** 🌀 Dropping the ~any~
Well, the first thing you're gonna have to get used to is not using ~any~.

#+begin_src mfroad
win32:any???foobar;
#+end_src

While it might seem like a good solution at first, it easily becomes unreadable, specially when ~any:any~ is used.

And this begs the question: what ~any~ alternative could you use? Well, *Regular Expressions* of course!

#+begin_src python
win.+ -> "foobar"
#+end_src

Yup, that represents the very same thing. And before you say "win32 isn't the same as win", remember that in MFRoad, ~win32~ is the designation for any Windows version.

** 🔡 Different system identification format
I hate to say it, but get ready to stop using ~win32~, ~linux2~ and ~darwin~... Actually, nevermind - it's for the better.

RSML moved from a poorly-documented mess (Python's ~sys.platform~) to a much better system identification system - pardon the redundancy - called *MSBuild Runtime Identifiers*. Yup, those.

I highly recommend reading Microsoft's documentation for RIDs in order to learn more about them.

** 🔷 Special Actions
*Special Actions* allow for more features to be specified. They are prefixed with ~@~ and they aren't built-in (except for =@EndAll=).

They can be given a string with no spaces as an argument. Internally, they can modify the parser or perform an action based on their return code.

** ✅ Choosing the right standard for you
Choosing the right standard is hard. Maybe you want [[file:../RSML_Language_Standards/MFRoadLike.org][something that feels like MFRoad]] or a [[file:../RSML_Language_Standards/Official25.org][recognized standard]].

There are several standards and since anyone can make their own, we can't possibly have a full list of standards here.

* 👀 In Conclusion
Hopefully, this documentation module helped you in your migration process. If you have doubts, feel free to expose them: you may contact me via [[mailto:real_mf366@yahoo.com][this link]] (or just send an email to ~real_mf366@yahoo.com~).
