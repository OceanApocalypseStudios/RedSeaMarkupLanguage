using System.Text;


namespace RSML.CLI
{

	internal static class CompiledRsmlGenerator
	{

		internal static string GenerateFSharp(string className, string newWhat)
		{

			return new StringBuilder()
				.AppendLine("//Generated by the RSML CLI")
				.AppendLine("//Red Sea Markup Language by OceanApocalypseStudios")
				.AppendLine("namespace RSML.Generated")
				.AppendLine("open RSML.Evaluation")
				.AppendLine($"module {className} =")
				.AppendLine($"    let Result : EvaluationResult = new EvaluationResult{newWhat}")
				.ToString();

		}

		internal static string GenerateVisualBasic(string className, string newWhat)
		{

			return new StringBuilder()
				.AppendLine("'Generated by the RSML CLI")
				.AppendLine("'Red Sea Markup Language by OceanApocalypseStudios")
				.AppendLine("Imports RSML.Evaluation")
				.AppendLine("Namespace RSML.Generated")
				.AppendLine($"    Public Module {className}")
				.AppendLine($"        Public ReadOnly Property Result As EvaluationResult")
				.AppendLine("            Get")
				.AppendLine($"                Return New EvaluationResult{newWhat}")
				.AppendLine("            End Get")
				.AppendLine("        End Property")
				.AppendLine("    End Module")
				.AppendLine("End Namespace")
				.ToString();

		}

		internal static string GenerateCSharp(string className, string newWhat)
		{

			return new StringBuilder()
				.AppendLine("//Generated by the RSML CLI")
				.AppendLine("//Red Sea Markup Language by OceanApocalypseStudios")
				.AppendLine("using RSML.Evaluation;")
				.AppendLine("namespace RSML.Generated")
				.AppendLine("{")
				.AppendLine($"    public static class {className}")
				.AppendLine("    {")
				.AppendLine($"        public EvaluationResult Result => new EvaluationResult{newWhat};")
				.AppendLine("    }")
				.AppendLine("}")
				.ToString();

		}

	}

}
